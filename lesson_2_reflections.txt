What happens when you initialize a repository? Why do you need to do it?
	When a new repository is initialized, .git file gets created and it stores details of the repository. You can add files, track the versions et al of the repository.

How is the staging area different from the working directory and the repository? What value do you think it offers?
	Staging area acts as an intermediate cache / repository to stage the modifications done on local working directory before we commit the changes to repository. Using git status and reflecting on the changes in staging area we can compare the files in staging area with the version in repository before we commit changes.

How can you use the staging area to make sure you have one commit per logical change?
	We can use staging are to manage all the logical changes required for the feature. If we feel any changes that are not part of logical change, then we can use git reset HEAD <file> to revert back the changed file.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
	Branches are requiered during experimental features or the features that might not make into the release and part of future release. Creating branches will also help maitaining seperate releases.


How do the diagrams help you visualize the branch structure?
	Diagrams clearly indicate, which commit belongs to which branch, it will help us to see the various features in different branches and can also help in making deicisions to include and merge into master or other branches.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
	Merging 2 branches together will result inot 1 moreged barnch having all the commits arranged chronological on command git log. We represent in diagram the way we wanted is mainly to check the reachability of the commits and this also helps in merging branches.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
	Git's automatic merging resolves lot of auto-merges. Also identifies conflicsts and adds branch code details for reference. Merge conflict resolution manually is the best way to identify and retain the required feature and merge conflicts properly.